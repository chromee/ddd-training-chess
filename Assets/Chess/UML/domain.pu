@startuml
title チェス

' enum PlayerColor
' enum PieceType
' enum Row
' enum Column
' class Coordinate {
'   Row Row
'   Column Column
' }


namespace Game {
  class Player {
    Color
  }

  class Game {
    GameStatus Status
    Board Board
    Player CurrentTurnPlayer
  }

  Game --> Player
  Game --> Boards.Board

  class GameFlowService {
    void GeneratePieces(Game, Board, Players)
    void MovePiece(Game, Player)
  }
}

namespace Boards {
  class Board {
    Piece[] Pieces
  }

  Board --> Pieces.Piece
}

namespace Pieces {
  class Piece {
    Player Owner
    Coordinate Position
    Move[] Moves

    void Move(Coordinate)
    bool CanMove(Coordinate)
    Coordinate[] MoveCandidates(Board)
  }

  class Move {
    Coordinate Destinations
  }
  class SingleMove {
  }
  class ConditionalMove {
    MoveConditions MoveConditions
  }
  class InifinityMove {
    Coordinate Direction
  }
  interface MoveConditions {
    bool Conditions(Coordinate, Board)
  }
  Move <|-- SingleMove
  Move <|-- ConditionalMove
  Move <|-- InifinityMove
  ConditionalMove --> MoveConditions
  Piece --> Move

  class MoveService {
    bool CanExecute(Move, Board)
    Move[] PawnMoves()
    Move[] KnightMoves()
    Move[] RookMoves()
    Move[] BishopMoves()
    Move[] QueenMoves()
    Move[] KingMoves()
  }

  Game.Player <-- Piece
}

@enduml
