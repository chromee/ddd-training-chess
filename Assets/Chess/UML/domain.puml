@startuml
title チェス


class Game
{
    PlayerColor CurrentPlayerColor
}

class GameStatusSolver
{
}

Game "1" *--* "1" GameStatusSolver
Game "1" --* "1" SpecialRuleExecutor
Game "1" --* "1" PieceMovementLogger
Game "1" --* "1" Board
Game "1" *--* "1" BoardStatusSolver


class BoardStatusSolver
{
}

class Board
{
    Piece[] Pieces
}

Board "1" --* "n" Piece

class Piece
{
PlayerColor Color
PieceType Type
Coordinate Position
Move[] Moves
bool IsDead
    
    void Move(Coordinate)
    bool CanMove(Coordinate)
    Coordinate[] MoveCandidates(Game)
}

class Move
{
    Movement[] movements
    IMoveConditions Conditions
}

class SingleMove
class InfinityMove

Piece "1" --* "n" Move
Move <|-- SingleMove
Move <|-- InfinityMove

interface IMoveConditions
{
    CanExecute(Game, Piece, Position)
}

class PawnDoubleMoveConditions
class KingCastlingConditions
class etc

Move "1" --* "1" IMoveConditions
Game o-- IMoveConditions
IMoveConditions <|-- PawnDoubleMoveConditions
IMoveConditions <|-- KingCastlingConditions
IMoveConditions <|-- etc

interface ISpecialRule
{
    void TryExecute(Game)
}

class Castling
class EnPassant
class Promotion

ISpecialRule <|-- Castling
ISpecialRule <|-- EnPassant
ISpecialRule <|-- Promotion

ISpecialRule -u-o Game

class SpecialRuleExecutor
{
    ISpecialRule[] SpecialRules
}

SpecialRuleExecutor "1" --* "n" ISpecialRule
SpecialRuleExecutor --o Board

class PieceMovementLog
{
    PlayerColor MovedPieceColor
    PieceType MovedPieceType
    Position PrevPosition
    Position NextPosition
}

class PieceMovementLogger
{
    PieceMovementLog[] Log
}

PieceMovementLog "n" *-u- "1" PieceMovementLogger
PieceMovementLogger o-- ISpecialRule

@enduml
